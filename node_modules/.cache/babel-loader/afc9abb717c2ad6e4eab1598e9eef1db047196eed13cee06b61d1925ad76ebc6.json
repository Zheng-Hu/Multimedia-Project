{"ast":null,"code":"import axios from 'axios';\nimport * as echarts from 'echarts';\nexport default {\n  name: 'WeatherView',\n  data() {\n    return {\n      weatherWarnMessage: null,\n      weatherReport: null,\n      rainfallRecodingPeriod: null,\n      humidityValue: null,\n      humidityRecordingTime: null,\n      sunriseTime: null,\n      sunsetTime: null\n    };\n  },\n  mounted() {\n    this.getWeatherWarn();\n    this.getWeatherGeneralSituation();\n    this.getWeatherReport();\n    this.getGasEmission();\n  },\n  methods: {\n    async getGasEmission() {\n      let response = (await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&lang=sc&rformat=json&year=2022&month=11&day=23')).data.data;\n      this.sunriseTime = response[0][1];\n      this.sunsetTime = response[0][3];\n    },\n    async getWeatherWarn() {\n      let response = await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=warnsum&lang=sc');\n      this.weatherWarnMessage = response.data;\n    },\n    async getWeatherGeneralSituation() {\n      let response = await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=fnd&lang=sc');\n      this.weatherReport = response.data.generalSituation;\n    },\n    async getWeatherReport() {\n      let response = (await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=rhrread&lang=sc')).data;\n      let temperatureData = response.temperature;\n      // this.temperatureUpdateTime = temperatureData.updateTime.slice(0, 10) + ' ' + temperatureData.updateTime.slice(11, 19)\n      let temperatureValue = temperatureData.data.map(function (item) {\n        return item.value;\n      });\n      let temperatureRegion = temperatureData.data.map(function (item) {\n        return item.place;\n      });\n      let rainfallData = response.rainfall;\n      let rainfallMaxValue = rainfallData.data.map(function (item) {\n        return item.max;\n      });\n      let rainfallRegion = rainfallData.data.map(function (item) {\n        return item.place;\n      });\n      this.rainfallRecodingPeriod = rainfallData.startTime.slice(0, 10) + ' ' + rainfallData.startTime.slice(11, 19) + ' ~ ' + rainfallData.endTime.slice(0, 10) + ' ' + rainfallData.endTime.slice(11, 19);\n      this.humidityValue = response.humidity.data[0].value;\n      this.humidityRecordingTime = response.humidity.recordTime.slice(0, 10) + ' ' + response.humidity.recordTime.slice(11, 19);\n      var rainfallBarChart = echarts.init(document.getElementById(\"rainfallBarChart\"));\n      var option;\n      option = {\n        title: {\n          text: 'Rainfall Data',\n          subtext: 'Recording Period: ' + this.rainfallRecodingPeriod\n        },\n        xAxis: {\n          type: 'category',\n          data: rainfallRegion\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: rainfallMaxValue,\n          type: 'bar'\n        }]\n      };\n      rainfallBarChart.setOption(option);\n      var temperatureBarChart = echarts.init(document.getElementById(\"temperatureBarChart\"));\n      option = {\n        title: {\n          text: 'Temperature Data',\n          subtext: 'UpdateTime: ' + this.rainfallRecodingPeriod\n        },\n        xAxis: {\n          type: 'category',\n          data: temperatureRegion\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: temperatureValue,\n          type: 'bar'\n        }]\n      };\n      temperatureBarChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"mappings":"AAmCA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAEA;EACA;EAEAC;IACA;IACA;IACA;IACA;EACA;EAEAC;IACA;MACA;MACA;MACA;IACA;IACA;MACA;MACA;IACA;IAEA;MACA;MAEA;IACA;IAEA;MACA;MAEA;MACA;MACA;QACA;MACA;MACA;QACA;MACA;MAGA;MAEA;QACA;MACA;MACA;QACA;MACA;MACA;MAEA;MACA;MAEA;MACA;MACAC;QACAC;UACAC;UACAC;QACA;QACAC;UACAC;UACAf;QACA;QACAgB;UACAD;QACA;QACAE,SACA;UACAjB;UACAe;QACA;MAEA;MACAG;MAEA;MACAR;QACAC;UACAC;UACAC;QACA;QACAC;UACAC;UACAf;QACA;QACAgB;UACAD;QACA;QACAE,SACA;UACAjB;UACAe;QACA;MAEA;MACAI;IACA;EACA;AACA","names":["name","data","weatherWarnMessage","weatherReport","rainfallRecodingPeriod","humidityValue","humidityRecordingTime","sunriseTime","sunsetTime","mounted","methods","option","title","text","subtext","xAxis","type","yAxis","series","rainfallBarChart","temperatureBarChart"],"sourceRoot":"src/views","sources":["WeatherView.vue"],"sourcesContent":["<template>\r\n    <div class=\"Weather\">\r\n        <div>\r\n            <h1>天气警告一览</h1>\r\n            <P>现时并无警告生效</P>\r\n        </div>\r\n        <div>\r\n            <h1>今日天气预报</h1>\r\n            <P>{{ weatherReport }}</P>\r\n        </div>\r\n        <div>\r\n            <div id=\"rainfallBarChart\" style=\"margin-left: 20px; width: 100%; height:500px\"></div>\r\n        </div>\r\n        <div>\r\n            <div id=\"temperatureBarChart\" style=\"margin-left: 20px; width: 100%; height:500px\"></div>\r\n        </div>\r\n        <div>\r\n            <h1>相对湿度</h1>\r\n            <p>记录时间: {{ humidityRecordingTime }}</p>\r\n            <p>{{ humidityValue }}%</p>\r\n        </div>\r\n        <div>\r\n            <h1>日出时间</h1>\r\n            <P>{{sunriseTime}}</P>\r\n        </div>\r\n        <div>\r\n            <h1>日落时间</h1>\r\n            <P>{{sunriseTime}}</P>\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\n\r\n\r\nimport axios from 'axios';\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n    name: 'WeatherView',\r\n    data() {\r\n        return {\r\n            weatherWarnMessage: null,\r\n            weatherReport: null,\r\n            rainfallRecodingPeriod: null,\r\n            humidityValue: null,\r\n            humidityRecordingTime: null,\r\n            sunriseTime:null,\r\n            sunsetTime:null\r\n\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.getWeatherWarn();\r\n        this.getWeatherGeneralSituation();\r\n        this.getWeatherReport();\r\n        this.getGasEmission();\r\n    },\r\n\r\n    methods: {\r\n        async getGasEmission() {\r\n            let response = (await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&lang=sc&rformat=json&year=2022&month=11&day=23')).data.data\r\n            this.sunriseTime = response[0][1]\r\n            this.sunsetTime = response[0][3]\r\n        },\r\n        async getWeatherWarn() {\r\n            let response = await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=warnsum&lang=sc')\r\n            this.weatherWarnMessage = response.data\r\n        },\r\n\r\n        async getWeatherGeneralSituation() {\r\n            let response = await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=fnd&lang=sc')\r\n\r\n            this.weatherReport = response.data.generalSituation\r\n        },\r\n\r\n        async getWeatherReport() {\r\n            let response = (await axios.get('https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=rhrread&lang=sc')).data\r\n\r\n            let temperatureData = response.temperature;\r\n            // this.temperatureUpdateTime = temperatureData.updateTime.slice(0, 10) + ' ' + temperatureData.updateTime.slice(11, 19)\r\n            let temperatureValue = temperatureData.data.map(function (item) {\r\n                return item.value\r\n            })\r\n            let temperatureRegion = temperatureData.data.map(function (item) {\r\n                return item.place\r\n            })\r\n\r\n\r\n            let rainfallData = response.rainfall;\r\n\r\n            let rainfallMaxValue = rainfallData.data.map(function (item) {\r\n                return item.max\r\n            })\r\n            let rainfallRegion = rainfallData.data.map(function (item) {\r\n                return item.place\r\n            })\r\n            this.rainfallRecodingPeriod = rainfallData.startTime.slice(0, 10) + ' ' + rainfallData.startTime.slice(11, 19) + ' ~ ' + rainfallData.endTime.slice(0, 10) + ' ' + rainfallData.endTime.slice(11, 19);\r\n\r\n            this.humidityValue = response.humidity.data[0].value\r\n            this.humidityRecordingTime = response.humidity.recordTime.slice(0, 10) + ' ' + response.humidity.recordTime.slice(11, 19)\r\n\r\n            var rainfallBarChart = echarts.init(document.getElementById(\"rainfallBarChart\"));\r\n            var option;\r\n            option = {\r\n                title: {\r\n                    text: 'Rainfall Data',\r\n                    subtext: 'Recording Period: ' + this.rainfallRecodingPeriod\r\n                },\r\n                xAxis: {\r\n                    type: 'category',\r\n                    data: rainfallRegion\r\n                },\r\n                yAxis: {\r\n                    type: 'value'\r\n                },\r\n                series: [\r\n                    {\r\n                        data: rainfallMaxValue,\r\n                        type: 'bar'\r\n                    }\r\n                ]\r\n            };\r\n            rainfallBarChart.setOption(option);\r\n\r\n            var temperatureBarChart = echarts.init(document.getElementById(\"temperatureBarChart\"));\r\n            option = {\r\n                title: {\r\n                    text: 'Temperature Data',\r\n                    subtext: 'UpdateTime: ' + this.rainfallRecodingPeriod\r\n                },\r\n                xAxis: {\r\n                    type: 'category',\r\n                    data: temperatureRegion\r\n                },\r\n                yAxis: {\r\n                    type: 'value'\r\n                },\r\n                series: [\r\n                    {\r\n                        data: temperatureValue,\r\n                        type: 'bar'\r\n                    }\r\n                ]\r\n            };\r\n            temperatureBarChart.setOption(option)\r\n        }\r\n    }\r\n}\r\n</script>\r\n  \r\n<style scoped>\r\n\r\n</style>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}